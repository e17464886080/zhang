day13回顾
  自定义模块
    导入
        import 语句
        from import 语句
        from import * 语句
    规则:
      1. 模块名必须是标识符
      2. 必须以.py结尾
      3. 模块名避免与标准 库模块的文件名冲突
    
    模块的属性
      一个模块内的全局变量

    .pyc 是.py文件编译后的文件

   模块的预置属性:
     __doc__ 属性 绑定文档字符串 help()
     __file__属性 绑定文件路径名
     __name__属性 绑定模块名(主模块名一定为'__main__')

    __all__ 列表
      限制 from import* 导入时只导入__all__列表内的属性

  隐藏属性
    _ 开头的属性为隐藏属性
      作用:和__all__列表类拟
        限制from import *导入时不导入 _开头的属性

  random模块

  包 package
    导入:
      import 包名(文件夹名).xxx.yyy.zzz
      from 包名.xxx.yyy.zzz import
      from 包名.xxx.yyy.zzz import *

    __init__.py
      文档字符串
      函数和数据
      __all__

    __all__ 列表
      from import * 只导入__all__列表内的内容

    包的相对导入
       from ..menu  import xxx
       from ..menu  import *







day14 笔记
异常 exception

什么是错误
    错误是指由于逻辑或语法等导致一个程序无法正常执行的问题
错误的特点:
    有些错误是无法预知的

什么是异常
  异常是程序出错时标识的一种状态
  当异常发生时,程序不会再下向执行,而转去调有此函数的地方待处理
  此错误并恢复为正常状态

异常的作用:
  用作信号,通知上层调用者有错误产生需要处理


try语句 的 两种语法:
  try-except语句
  try-finally语句

try-except语句的语法
    try:
        可以触发异常的语句
    except 错误类型1 [as 变量名1]:
        异常处理语句1
    except 错误类型2 [as 变量名2]:
        异常处理语法2
    except (错误类型3, 错误类型4, ...) [as 变量名3]:
        异常处理语句3
    ...
    except:
        异常处理语法
    else:
        未发生异常语句
    finally:
        最终语句
  作用:
    偿试捕获异常,得到异常通知,将程序由异常流程转为正常流程并
    继续执行
  说明:
    as 子句是用于绑定错误对象的变量,可以省略
    except 子句可以有一个或多个,但至少要有一个
    except: 子句必须放在所有的except之后
    else 子句最多只有能一个,也可以省略不写
    finally 子句最多只能有一个,也可以省略不写
  说明2:
    else 子句里的语句会在当前try中没有发生任何异常时被执行
    finally 子句 里的语句无论在异常状态还是正常状态都一定会
          被执行

示例见:
  try-except.py
  try-except2.py
  try-except3.py
  try-except4.py



练习:
  写一个函数 get_score() 来获取学生输入的成绩(0~100的整数)
    如果输入出现异常,则此函数返回0,否则返回用户输入的成绩
    如:
      def get_score():
          ....  # 此处自己实现

      score = get_score()
      print("学生的成绩是:", score)


python 全部的错误类型
  文档参见:
    python_base_docs_html/Python全部的异常类型.html 

  查看所有异常的类型文档 的方式:
    >>> help(__builtins__)

思考:
  如何能让之前写的<<学生信息管理系统>> 无论用户如何操作都
   不会发生异常而退出?
  
try-finally语句
  语法:
    try:
        可能触发异常的语句
    finally:
        最终语句
  说明:
    finally子句不可以省略
    一定不存在except 子句
  作用:
    通常用try-finally语句来做触发异常时必须要处理的事情,无论
    异常是否发生,finally子句都会被执行
  注:
    try-finally语句不会改变程序的正常/异常状态
  示例见:
    try_finally.py
  

try语句嵌套
  示例见:
    try_finally_embed.py




raise 语句
  作用:
    触发一个错误,让程序进入异常状态
    发送错误通知给调用者
  语法:
    raise 异常类型
    或
    raise 异常对象
    或
    raise     # << 重新触发上一次异常
  示例见:
    raise.py
  说明:
    raise 无参调用时,只能放在try-except 的except 子句里
      用来触发刚收到且正在处理的错误信息
    

练习:
  写一个函数 get_age() 用来获取一个人的年龄信息
    此函数规定用户只能输入 1~140之间的整数,如果用户输入其它
    的数则直接触发ValueError类型的错误!
    如:
        def get_age()
            ...  # 此处自己实现
        try:
            age = get_age()
            print("用户输入的年龄是", age)
        except ValueError as err:
            print("获取年龄时发生错误,错误的原因是", err)




assert 语句(断言语句)
  语法:
    assert 真值表达式, 错误数据(通常是字符串)
  作用:
    当真值表达式为假(False)时,用错误数据创建一个
       AssertionError 类型的错误,并进入异常状态
    通常用来在编写代码时,故意抛出异常来发现错误
  等同于:
    if bool(真值表达式) == False:
        raise AssertionError(错误数据)
  示例见:
    assert.py

为什么要用异常处理机制
   在程序调用层数较深时,向主调函数传递错误信息要层层return
   比较麻烦,所以用异常处理机制

def f1():
    print("f1")
    error = ValueError("用户输入有错误")
    raise error

def f2():
    print("f2")
    f1()

def f3():
    print("f3")
    f2()

def main()
    try:
        f3()
    except ValueError:
        print("收到错误通知....")

main()
    


异常小结:
  语句:
    try-except   接收异常通知(把异常状态转为正常状态)
    try-finally  执行必须要执行的语句(无论正常/异常状态)
    raise 语句   抛出(发送) 错误通知,将程序转为异常状态
    assert 语句  根据条件决定是否抛出AssertionError类型 
                 的错误,并转为异常状态
    

迭代器 Iterator
  什么是迭代器
    迭代器是访问可迭代对象的工具
    迭代器是指用iter(obj) 函数返回的对象(实例)
    迭代器可以用next(it) 函数获取可迭代对象的数据
函数:
  iter(iterable)  从可迭代对象中返回一个迭代器,iterable
            必须是一个能提供一个迭代器的对象
  next(iterator)  从迭代器iterator中获取下一个数据,如果
            无法获取下一行数据,则触发StopIteration异常
  说明:
    迭代器只能往前取值,不能后退
    用iter函数可以返回一个可迭代对象的迭代器
  示例:
    L = [2, 3, 5, 7]
    it = iter(L)  # it 绑定的是L提供的迭代器
    print(next(it))  # 2  # 向迭代器要数据
    print(next(it))  # 3
    print(next(it))  # 5
    print(next(it))  # 7
    print(next(it))  # StopIteration异常
    myit = iter(range(1, 10, 3))  # 1, 4, 7
    print(next(myit))  # 1
    print(next(myit))  # 4
    print(next(myit))  # 7
    print(next(myit))  # StopIteration异常

示例见:
  iterator.py



练习:
  1. 有一个集合
    s = {"唐僧", '悟空', '八戒', '沙僧'}
    用for 语句来遍历所有元素如下:
      for x in s:
          print(x)
      else:
          print("遍历结束")
    请将上面的for语句改写为while语句和迭代器实现

  2. 一个球从100米高空落下,每次落地后反弹高度为原高度的一半
    再落下,写程序
       1) 算出皮球第10次落地后反弹多高?
       2) 算出皮球第10次反弹后经过多少米的路程?

  3. 修改原学生信息管理程序,加入异常处理语句,让程序在任何情况
    下都能按逻辑正常执行
      如: 输入成绩和年龄时输入非法字符会导致程序崩溃


        











